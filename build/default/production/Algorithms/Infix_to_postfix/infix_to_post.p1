Version 4.0 HI-TECH Software Intermediate Code
"20 Algorithms/Infix_to_postfix/infix_to_post.h
[; ;Algorithms/Infix_to_postfix/infix_to_post.h: 20: struct Stack_t {
[s S9 `f -> 20 `i `i 1 ]
[n S9 Stack_t data top ]
"25
[; ;Algorithms/Infix_to_postfix/infix_to_post.h: 25: struct Stack {
[s S10 `uc -> 100 `i `i 1 ]
[n S10 Stack data top ]
"16 Algorithms/Infix_to_postfix/infix_to_post.c
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 16: void initialize_t(struct Stack_t *stack) {
[v _initialize_t `(v ~T0 @X0 1 ef1`*S9 ]
{
[e :U _initialize_t ]
[v _stack `*S9 ~T0 @X0 1 r1 ]
[f ]
"17
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 17:     stack->top = -1;
[e = . *U _stack 1 -U -> 1 `i ]
"18
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 18: }
[e :UE 11 ]
}
"21
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 21: void push_t(struct Stack_t *stack, float c) {
[v _push_t `(v ~T0 @X0 1 ef2`*S9`f ]
{
[e :U _push_t ]
[v _stack `*S9 ~T0 @X0 1 r1 ]
[v _c `f ~T0 @X0 1 r2 ]
[f ]
"22
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 22:     stack->data[++stack->top] = c;
[e = *U + &U . *U _stack 0 * -> -> =+ . *U _stack 1 -> 1 `i `ui `ux -> -> # *U &U . *U _stack 0 `ui `ux _c ]
"23
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 23: }
[e :UE 12 ]
}
"26
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 26: float pop_t(struct Stack_t *stack) {
[v _pop_t `(f ~T0 @X0 1 ef1`*S9 ]
{
[e :U _pop_t ]
[v _stack `*S9 ~T0 @X0 1 r1 ]
[f ]
"27
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 27:     return stack->data[stack->top--];
[e ) *U + &U . *U _stack 0 * -> -> -- . *U _stack 1 -> 1 `i `ui `ux -> -> # *U &U . *U _stack 0 `ui `ux ]
[e $UE 13  ]
"28
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 28: }
[e :UE 13 ]
}
"33
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 33: void initialize(struct Stack *stack) {
[v _initialize `(v ~T0 @X0 1 ef1`*S10 ]
{
[e :U _initialize ]
[v _stack `*S10 ~T0 @X0 1 r1 ]
[f ]
"34
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 34:     stack->top = -1;
[e = . *U _stack 1 -U -> 1 `i ]
"35
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 35: }
[e :UE 14 ]
}
"38
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 38: void push(struct Stack *stack, char c) {
[v _push `(v ~T0 @X0 1 ef2`*S10`uc ]
{
[e :U _push ]
[v _stack `*S10 ~T0 @X0 1 r1 ]
[v _c `uc ~T0 @X0 1 r2 ]
[f ]
"39
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 39:     stack->data[++stack->top] = c;
[e = *U + &U . *U _stack 0 * -> -> =+ . *U _stack 1 -> 1 `i `ui `ux -> -> # *U &U . *U _stack 0 `ui `ux _c ]
"40
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 40: }
[e :UE 15 ]
}
"43
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 43: char pop(struct Stack *stack) {
[v _pop `(uc ~T0 @X0 1 ef1`*S10 ]
{
[e :U _pop ]
[v _stack `*S10 ~T0 @X0 1 r1 ]
[f ]
"44
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 44:     return stack->data[stack->top--];
[e ) *U + &U . *U _stack 0 * -> -> -- . *U _stack 1 -> 1 `i `ui `ux -> -> # *U &U . *U _stack 0 `ui `ux ]
[e $UE 16  ]
"45
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 45: }
[e :UE 16 ]
}
"47
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 47: int check_digit (char c) {
[v _check_digit `(i ~T0 @X0 1 ef1`uc ]
{
[e :U _check_digit ]
[v _c `uc ~T0 @X0 1 r1 ]
[f ]
"48
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 48:  if ((c>='0') && (c<='9')) return 1;
[e $ ! && >= -> _c `ui -> 48 `ui <= -> _c `ui -> 57 `ui 18  ]
[e ) -> 1 `i ]
[e $UE 17  ]
[e :U 18 ]
"49
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 49:  return 0;
[e ) -> 0 `i ]
[e $UE 17  ]
"50
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 50: }
[e :UE 17 ]
}
"53
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 53: int precedence(char op) {
[v _precedence `(i ~T0 @X0 1 ef1`uc ]
{
[e :U _precedence ]
[v _op `uc ~T0 @X0 1 r1 ]
[f ]
"54
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 54:     if (op == '+' || op == '-')
[e $ ! || == -> _op `ui -> 43 `ui == -> _op `ui -> 45 `ui 20  ]
"55
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 55:         return 1;
[e ) -> 1 `i ]
[e $UE 19  ]
[e :U 20 ]
"56
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 56:     if (op == '*' || op == '/')
[e $ ! || == -> _op `ui -> 42 `ui == -> _op `ui -> 47 `ui 21  ]
"57
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 57:         return 2;
[e ) -> 2 `i ]
[e $UE 19  ]
[e :U 21 ]
"58
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 58:     return 0;
[e ) -> 0 `i ]
[e $UE 19  ]
"59
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 59: }
[e :UE 19 ]
}
"61
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 61: float doMath(char op, float op1, float op2){
[v _doMath `(f ~T0 @X0 1 ef3`uc`f`f ]
{
[e :U _doMath ]
[v _op `uc ~T0 @X0 1 r1 ]
[v _op1 `f ~T0 @X0 1 r2 ]
[v _op2 `f ~T0 @X0 1 r3 ]
[f ]
"62
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 62:     if (op == '*')
[e $ ! == -> _op `ui -> 42 `ui 23  ]
"63
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 63:         return (float)(op1*op2);
[e ) * _op1 _op2 ]
[e $UE 22  ]
[e $U 24  ]
"64
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 64:     else if (op == '/')
[e :U 23 ]
[e $ ! == -> _op `ui -> 47 `ui 25  ]
"65
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 65:         return (float)(op1/op2);
[e ) / _op1 _op2 ]
[e $UE 22  ]
[e $U 26  ]
"66
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 66:     else if (op == '+')
[e :U 25 ]
[e $ ! == -> _op `ui -> 43 `ui 27  ]
"67
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 67:         return (float)(op1+op2);
[e ) + _op1 _op2 ]
[e $UE 22  ]
[e $U 28  ]
"68
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 68:     else if (op == '-')
[e :U 27 ]
[e $ ! == -> _op `ui -> 45 `ui 29  ]
"69
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 69:         return (float)(op1-op2);
[e ) - _op1 _op2 ]
[e $UE 22  ]
[e :U 29 ]
[e :U 28 ]
[e :U 26 ]
[e :U 24 ]
"70
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 70:     return 0.0;
[e ) -> .0.0 `f ]
[e $UE 22  ]
"71
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 71: }
[e :UE 22 ]
}
"74
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 74: void infixToPostfix(const char *infix, char *postfix) {
[v _infixToPostfix `(v ~T0 @X0 1 ef2`*Cuc`*uc ]
{
[e :U _infixToPostfix ]
[v _infix `*Cuc ~T0 @X0 1 r1 ]
[v _postfix `*uc ~T0 @X0 1 r2 ]
[f ]
"75
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 75:     struct Stack operatorStack;
[v _operatorStack `S10 ~T0 @X0 1 a ]
"76
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 76:     initialize(&operatorStack);
[e ( _initialize (1 &U _operatorStack ]
"78
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 78:     int i = 0;
[v _i `i ~T0 @X0 1 a ]
[e = _i -> 0 `i ]
"79
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 79:     int j = 0;
[v _j `i ~T0 @X0 1 a ]
[e = _j -> 0 `i ]
"80
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 80:     while (infix[i] != '\0') {
[e $U 31  ]
[e :U 32 ]
{
"81
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 81:         char current = infix[i];
[v _current `uc ~T0 @X0 1 a ]
[e = _current *U + _infix * -> _i `x -> -> # *U _infix `i `x ]
"83
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 83:         if (current == ' ') {
[e $ ! == -> _current `ui -> 32 `ui 34  ]
{
"84
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 84:             i++;
[e ++ _i -> 1 `i ]
"85
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 85:             continue;
[e $U 31  ]
"86
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 86:         }
}
[e :U 34 ]
"88
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 88:         if (check_digit(current) || current == '.') {
[e $ ! || != ( _check_digit (1 _current -> 0 `i == -> _current `ui -> 46 `ui 35  ]
{
"89
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 89:             while (check_digit(infix[i]) || infix[i] == '.') {
[e $U 36  ]
[e :U 37 ]
{
"90
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 90:                 postfix[j++] = infix[i++];
[e = *U + _postfix * -> ++ _j -> 1 `i `x -> -> # *U _postfix `i `x *U + _infix * -> ++ _i -> 1 `i `x -> -> # *U _infix `i `x ]
"91
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 91:             }
}
[e :U 36 ]
"89
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 89:             while (check_digit(infix[i]) || infix[i] == '.') {
[e $ || != ( _check_digit (1 *U + _infix * -> _i `x -> -> # *U _infix `i `x -> 0 `i == -> *U + _infix * -> _i `x -> -> # *U _infix `i `x `ui -> 46 `ui 37  ]
[e :U 38 ]
"92
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 92:             postfix[j++] = ' ';
[e = *U + _postfix * -> ++ _j -> 1 `i `x -> -> # *U _postfix `i `x -> -> 32 `ui `uc ]
"93
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 93:         }else {
}
[e $U 39  ]
[e :U 35 ]
{
"94
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 94:             while (operatorStack.top != -1 && precedence(current) <= precedence(operatorStack.data[operatorStack.top])) {
[e $U 40  ]
[e :U 41 ]
{
"95
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 95:                 postfix[j++] = pop(&operatorStack);
[e = *U + _postfix * -> ++ _j -> 1 `i `x -> -> # *U _postfix `i `x ( _pop (1 &U _operatorStack ]
"96
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 96:             }
}
[e :U 40 ]
"94
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 94:             while (operatorStack.top != -1 && precedence(current) <= precedence(operatorStack.data[operatorStack.top])) {
[e $ && != . _operatorStack 1 -U -> 1 `i <= ( _precedence (1 _current ( _precedence (1 *U + &U . _operatorStack 0 * -> -> . _operatorStack 1 `ui `ux -> -> # *U &U . _operatorStack 0 `ui `ux 41  ]
[e :U 42 ]
"97
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 97:             push(&operatorStack, current);
[e ( _push (2 , &U _operatorStack _current ]
"98
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 98:             i++;
[e ++ _i -> 1 `i ]
"99
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 99:         }
}
[e :U 39 ]
"100
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 100:     }
}
[e :U 31 ]
"80
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 80:     while (infix[i] != '\0') {
[e $ != -> *U + _infix * -> _i `x -> -> # *U _infix `i `x `ui -> 0 `ui 32  ]
[e :U 33 ]
"102
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 102:     while (operatorStack.top != -1) {
[e $U 43  ]
[e :U 44 ]
{
"103
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 103:         postfix[j++] = pop(&operatorStack);
[e = *U + _postfix * -> ++ _j -> 1 `i `x -> -> # *U _postfix `i `x ( _pop (1 &U _operatorStack ]
"104
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 104:     }
}
[e :U 43 ]
"102
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 102:     while (operatorStack.top != -1) {
[e $ != . _operatorStack 1 -U -> 1 `i 44  ]
[e :U 45 ]
"106
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 106:     postfix[j] = '\0';
[e = *U + _postfix * -> _j `x -> -> # *U _postfix `i `x -> -> 0 `ui `uc ]
"107
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 107: }
[e :UE 30 ]
}
"110
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 110: void evaluatePostfix(const char *postfix, float *result) {
[v _evaluatePostfix `(v ~T0 @X0 1 ef2`*Cuc`*f ]
{
[e :U _evaluatePostfix ]
[v _postfix `*Cuc ~T0 @X0 1 r1 ]
[v _result `*f ~T0 @X0 1 r2 ]
[f ]
"111
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 111:     struct Stack_t operandStack;
[v _operandStack `S9 ~T0 @X0 1 a ]
"112
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 112:     initialize_t(&operandStack);
[e ( _initialize_t (1 &U _operandStack ]
"114
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 114:     int i = 0;
[v _i `i ~T0 @X0 1 a ]
[e = _i -> 0 `i ]
"115
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 115:     while (postfix[i] != '\0') {
[e $U 47  ]
[e :U 48 ]
{
"116
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 116:         char current = postfix[i];
[v _current `uc ~T0 @X0 1 a ]
[e = _current *U + _postfix * -> _i `x -> -> # *U _postfix `i `x ]
"118
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 118:         if (check_digit(current) || current == '.') {
[e $ ! || != ( _check_digit (1 _current -> 0 `i == -> _current `ui -> 46 `ui 50  ]
{
"119
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 119:             float num = 0.0;
[v _num `f ~T0 @X0 1 a ]
[e = _num -> .0.0 `f ]
"120
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 120:             int isFractional = 0;
[v _isFractional `i ~T0 @X0 1 a ]
[e = _isFractional -> 0 `i ]
"121
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 121:             float fractionalMultiplier = 0.1;
[v _fractionalMultiplier `f ~T0 @X0 1 a ]
[e = _fractionalMultiplier -> .0.1 `f ]
"123
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 123:             while (check_digit(postfix[i]) || postfix[i] == '.') {
[e $U 51  ]
[e :U 52 ]
{
"124
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 124:                 if (postfix[i] == '.') {
[e $ ! == -> *U + _postfix * -> _i `x -> -> # *U _postfix `i `x `ui -> 46 `ui 54  ]
{
"125
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 125:                     isFractional = 1;
[e = _isFractional -> 1 `i ]
"126
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 126:                     i++;
[e ++ _i -> 1 `i ]
"127
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 127:                     continue;
[e $U 51  ]
"128
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 128:                 }
}
[e :U 54 ]
"130
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 130:                 if (!isFractional) {
[e $ ! ! != _isFractional -> 0 `i 55  ]
{
"131
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 131:                     num = num * 10 + (postfix[i] - '0');
[e = _num + * _num -> -> 10 `i `f -> - -> *U + _postfix * -> _i `x -> -> # *U _postfix `i `x `ui -> 48 `ui `f ]
"132
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 132:                 } else {
}
[e $U 56  ]
[e :U 55 ]
{
"133
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 133:                     num += (postfix[i] - '0') * fractionalMultiplier;
[e =+ _num * -> - -> *U + _postfix * -> _i `x -> -> # *U _postfix `i `x `ui -> 48 `ui `f _fractionalMultiplier ]
"134
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 134:                     fractionalMultiplier /= 10;
[e =/ _fractionalMultiplier -> -> 10 `i `f ]
"135
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 135:                 }
}
[e :U 56 ]
"136
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 136:                 i++;
[e ++ _i -> 1 `i ]
"137
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 137:             }
}
[e :U 51 ]
"123
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 123:             while (check_digit(postfix[i]) || postfix[i] == '.') {
[e $ || != ( _check_digit (1 *U + _postfix * -> _i `x -> -> # *U _postfix `i `x -> 0 `i == -> *U + _postfix * -> _i `x -> -> # *U _postfix `i `x `ui -> 46 `ui 52  ]
[e :U 53 ]
"138
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 138:             push_t(&operandStack, num);
[e ( _push_t (2 , &U _operandStack _num ]
"139
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 139:             num = 0.0;
[e = _num -> .0.0 `f ]
"140
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 140:         } else if (current == ' ') {
}
[e $U 57  ]
[e :U 50 ]
[e $ ! == -> _current `ui -> 32 `ui 58  ]
{
"141
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 141:             i++;
[e ++ _i -> 1 `i ]
"142
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 142:         } else {
}
[e $U 59  ]
[e :U 58 ]
{
"143
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 143:             float operand2 = pop_t(&operandStack);
[v _operand2 `f ~T0 @X0 1 a ]
[e = _operand2 ( _pop_t (1 &U _operandStack ]
"144
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 144:             float operand1 = pop_t(&operandStack);
[v _operand1 `f ~T0 @X0 1 a ]
[e = _operand1 ( _pop_t (1 &U _operandStack ]
"145
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 145:             push_t(&operandStack, doMath(current, operand1, operand2));
[e ( _push_t (2 , &U _operandStack ( _doMath (3 , , _current _operand1 _operand2 ]
"146
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 146:             i++;
[e ++ _i -> 1 `i ]
"147
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 147:         }
}
[e :U 59 ]
[e :U 57 ]
"148
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 148:     }
}
[e :U 47 ]
"115
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 115:     while (postfix[i] != '\0') {
[e $ != -> *U + _postfix * -> _i `x -> -> # *U _postfix `i `x `ui -> 0 `ui 48  ]
[e :U 49 ]
"150
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 150:     *result = (float)pop_t(&operandStack);
[e = *U _result ( _pop_t (1 &U _operandStack ]
"151
[; ;Algorithms/Infix_to_postfix/infix_to_post.c: 151: }
[e :UE 46 ]
}
